<?php
/**
 * @file
 * Code for the PECE Core feature.
 */

include_once 'pece_core.features.inc';
include_once 'pece_core.functions.inc';

/**
 * Implements hook_url_outbound_alter().
 */
function pece_core_url_outbound_alter(&$path, &$options, $original_path) {
  // @info: Fix AJAX error on views_autocomplete_filters.
  if (isset($options['script']) && $options['script'] == 'index.php') {
    $options['script'] = '';
  }
}

/**
 * Implements hook_modules_enabled().
 *
 * This hook is implemented to assign some default permissions for PECE profile.
 * This has to be done in this hook to run after both features
 * and defaultconfig which power the functionality. Hopefully a more general solution
 * can be found. More information - http://drupal.org/node/1837312.
 */
function pece_core_modules_enabled($modules) {

  // Only run this logic if we are executing as part of an install profile
  // and only for this particular module.
  if (drupal_installation_attempted() && in_array('pece_core', $modules)) {

    // Define some permissions for the authentcated user role
    user_role_grant_permissions(DRUPAL_AUTHENTICATED_RID, array('submit latitude/longitude'));
  }
}

/**
 * Implements hook_menu_alter.
 */
function pece_core_menu_alter(&$items) {
  // We don't use panopoly's default content types.
  $items['node/add/panopoly-page']['access callback'] = FALSE;
  $items['node/add/panopoly-landing-page']['access callback'] = FALSE;
}

/**
 * Implements hook_entity_info_alter().
 */
function pece_core_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes']['mini_teaser'] = array(
    'label' => t('Mini teaser'),
    'custom settings' => TRUE,
  );

  $entity_info['node']['view modes']['most_recent'] = array(
    'label' => t('Most Recent'),
    'custom settings' => TRUE,
  );

  $entity_info['node']['view modes']['free_panel'] = array(
    'label' => t('Free Panel'),
    'custom settings' => TRUE,
  );

  $entity_info['node']['view modes']['card'] = array(
    'label' => t('Card'),
    'custom settings' => TRUE,
  );

  $entity_info['node']['view modes']['card_full_text'] = array(
    'label' => t('Card - Full text'),
    'custom settings' => TRUE,
  );

  $entity_info['node']['view modes']['meta_content'] = array(
    'label' => t('Meta Content'),
    'custom settings' => TRUE,
  );

  $entity_info['node']['view modes']['highlighted'] = array(
    'label' => t('Highlighted'),
    'custom settings' => TRUE,
  );

  $entity_info['user']['view modes']['mini_teaser'] = array(
    'label' => t('Mini teaser'),
    'custom settings' => TRUE,
  );

  $entity_info['file']['view modes']['mini_teaser'] = array(
    'label' => t('Mini teaser'),
    'custom settings' => TRUE,
  );

  $entity_info['file']['view modes']['most_recent'] = array(
    'label' => t('Most Recent'),
    'custom settings' => TRUE,
  );

}

/**
 * Implements hook_field_widget_form_alter().
 */
function pece_core_field_widget_form_alter(&$element, &$form_state, $context) {
  // @TODO: allow this field to be fulfiled once PECE API is built.
  if ($context['field']['field_name'] == 'field_pece_uri') {
    $element['#access'] = FALSE;
  }
}

/**
 * Implements hook_er_viewmode_get_view_modes_alter().
 *
 * Avoid using full view mode on references entities.
 */
function pece_core_er_viewmode_get_view_modes_alter(&$view_modes, $field, $instance) {
  unset($view_modes['full']);
  $card_title = $view_modes['card'];
  $view_modes = array(
    'card' => $card_title,
    'card_full_text' => 'Card - full text',
  ) + $view_modes;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function pece_core_form_pece_fieldsite_node_form_alter(&$form, &$form_state) {
  // Hide the comment settings fieldset.
  $form['comment_settings']['#access'] = FALSE;

  $form['author']['name']['#required'] = TRUE;
}

/**
 * Implements hook_preprocess_page().
 */
function pece_core_preprocess_page(&$variables) {
  $variables['pece_docs'] = l('Need help with PECE?', 'https://pece-project.github.io/drupal-pece/');
  $variables['pece_slack'] = l('Join the PECE Slack channel', 'https://join.slack.com/t/peceniks/shared_invite/enQtNzUzMjc4MjgxNjE5LTM5ZWI0NWVlMzhkNmFkNDYwNTBhZDA4MDFjY2ViNTU5ZjYyNzRhY2EwNDk0ODk1YzIxNDc2MGU4ODE1ZTU3ZjU');
}

/**
 * Implements Hook form alter
 * @param $form
 * @param $form_state
 * @param $form_id
 */
function pece_core_form_alter(&$form, &$form_state, $form_id) {
  if (isset($form['field_pece_contributors'])) {
    $form['#submit'][] = 'pece_core_contributors_submit';
    $form['field_pece_contributors']['#element_validate'][] = 'pece_core_validate_contributors';
  }
}

/**
 * Validate contributors
 * @param $element
 * @param $form_state
 */
function pece_core_validate_contributors($element, &$form_state) {
  foreach ($form_state['input']['field_pece_contributors']['und'] as $key => $contributor) {

    if (isset($contributor['target_id']) && $contributor['target_id'] != '' && (strpos($contributor['target_id'], ' (') == false)) {
      $uid = db_query('SELECT uid from {users} WHERE name = :name', array(':name' => $contributor['target_id']))->fetchField();

      if (!$uid)
        form_set_error('edit-field-pece-contributors-und-' . $key . '-target-id', t('@username isn\'t valid username.',['@username' => $contributor['target_id']]));
    }
  }
}

/**
 * Change username contributor to id
 * @param $element
 * @param $form_state
 */
function pece_core_contributors_submit($form, &$form_state) {
  foreach ($form_state['input']['field_pece_contributors']['und'] as $key => $contributor) {

    if (isset($contributor['target_id']) && $contributor['target_id'] != '' && (strpos($contributor['target_id'], ' (') == false)) {
      $uid = db_query('SELECT uid from {users} WHERE name = :name', array(':name' => $contributor['target_id']))->fetchField();

      if ($uid)
        $form_state['values']['field_pece_contributors']['und'][$key]['target_id'] = $uid;
      else
        form_set_error('edit-field-pece-contributors-und-' . $key . '-target-id', t('@username isn\'t valid username.',['@username' => $contributor['target_id']]));
    }
  }
}
