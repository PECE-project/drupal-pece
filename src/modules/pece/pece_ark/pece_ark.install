<?php

/**
 * @file
 * Schema definitions and install/update/uninstall hooks for PECE ARK module.
 */

/**
 * Implements hook_install().
 */
function pece_ark_install() {
  _pece_ark_install_perms();
  pece_ark_update_7001();
}

/**
 * Grants PECE custom ARK permission.
 */
function _pece_ark_install_perms() {
  module_load_include('inc', 'pece', 'pece.functions');
  $pece_ark_perms = array(
    'administrator' => array(
      'administer ark' => TRUE,
    )
  );
  pece_set_permissions($pece_ark_perms);
}
/**
 * Implements hook_uninstall().
 */
function pece_ark_uninstall() {
  $node_types = pece_ark_all_available_node_types();
  foreach ($node_types as $node_type) {
    variable_del('ark_' . $node_type . '_who');
    variable_del('ark_' . $node_type . '_composite_who');
    variable_del('ark_' . $node_type . '_when');
  }
  variable_del('ark_node_types');
  variable_del('ark_naan');
  variable_del('ark_ezid_user');
  variable_del('ark_ezid_password');
  variable_del('ark_ezid_remote_export');
  variable_del('ark_ezid_remote_status');
  variable_del('ark_ezid_update_if_exists');
  variable_del('ark_composite_who_field');
  variable_del('ark_indexing_limit');
  variable_del('ark_authors_name_separator');
  variable_del('ark_remote_server_address');
  variable_del('ark_remote_identifier_site_address');
  variable_del('ark_name_prefix');
}

/**
 * Implements hook_schema().
 */
function pece_ark_schema() {
  $schema = array();

  $schema['ark_map'] = array(
    'description' => 'ARK PURL to Drupal entity mapping.',
    'fields' => array(
      'ark_name' => array(
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Name of ARK object.',
      ),
      'remote_ark_name' => array(
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
        'description' => 'The remote name of ARK object.',
      ),
      'entity_type' => array(
        'type' => 'varchar',
        'length' => '128',
        'not null' => TRUE,
        'default' => '',
        'description' => 'Entity type of resource.',
      ),
      'entity_id' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'unsigned' => TRUE,
        'description' => 'Entity id of resource.',
      ),
      'ark_who' => array(
        'type' => 'text',
        'size' => 'normal',
        'not null' => TRUE,
        'description' => 'The WHO field from ARK definition.',
      ),
      'ark_when' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The WHEN (Unix timestamp) field from ARK definition.',
      ),
      'created' => array(
        'description' => 'The Unix timestamp when name of ARK object was created.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'remote_created' => array(
        'description' => 'The Unix timestamp when name of remote ARK object was created.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'changed' => array(
        'description' => 'The Unix timestamp when name of ARK object was most recently saved.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'remote_changed' => array(
        'description' => 'The Unix timestamp when name of remote ARK object was most recently saved.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'data' => array(
        'type' => 'blob',
        'not null' => FALSE,
        'size' => 'big',
        'serialize' => TRUE,
        'description' => 'A serialized array of additional data.',
      ),
      'remote_data' => array(
        'type' => 'blob',
        'not null' => FALSE,
        'size' => 'big',
        'serialize' => TRUE,
        'description' => 'A serialized array of remote additional data.',
      ),
      'pending_remote_update' => array(
        'type' => 'int',
        'not null' => TRUE,
        'size' => 'tiny',
        'default' => 1,
        'description' => 'Should send updated data to the remote Ark NAAN.',
      ),
    ),
    'primary key' => array('ark_name'),
    'unique keys' => array(
      'entity' => array('entity_type', 'entity_id'),
    ),
  );

  return $schema;
}

/**
 * Setup default values for PECE.
 */
function pece_ark_update_7001() {
  pece_ark_set_default_vars();
}

/**
 * Apply views feature ARK.
 */
function pece_ark_update_7002() {
  if (module_exists('features')) {
    features_revert(array('pece_ark' => array('views_view')));
  }
}
